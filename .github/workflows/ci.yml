name: ci pipeline

on:
  push:
    branches:
      - master
      - 'feature/**'
  pull_request:
    branches:
      - master

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/package-lock.json

      - name: Install dependencies
        working-directory: src
        run: npm ci

      - name: Check formatting (Prettier)
        working-directory: src
        run: npx prettier --check .

      - name: Lint code (ESLint)
        working-directory: src
        run: npx eslint . --ext .js --max-warnings=0

      - name: Run tests & coverage
        working-directory: src
        run: npm test -- --coverage

      - name: Run SAST with Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/javascript

  docker:
    needs: ci
    if: github.ref == 'refs/heads/master' || github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: local/app:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: local/app:${{ github.sha }}
          format: table
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          exit-code: 1

      - name: Generate SBOM (Software Bill of Materials)
        uses: anchore/sbom-action@v0
        with:
          image: local/app:${{ github.sha }}
          output-file: sbom.json

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.5.0

      - name: Push Docker image (if scan passed)
        if: success()
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Sign image with Cosign (keyless)
        if: success()
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign sign --yes ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:${{ github.sha }}
          cosign sign --yes ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:latest

      - name: Attach SBOM to image
        if: success()
        run: |
          cosign attach sbom --sbom sbom.json ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:${{ github.sha }}

      - name: Verify image signature
        if: success()
        env:
          COSIGN_EXPERIMENTAL: 1
        run: |
          cosign verify \
            ${{ secrets.DOCKERHUB_USERNAME }}/devops-demo:${{ github.sha }} \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/" \
            --certificate-oidc-issuer="https://token.actions.githubusercontent.com"